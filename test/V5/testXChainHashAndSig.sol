// SPDX-License-Identifier:
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";
import "@openzeppelin/contracts/utils/Strings.sol";

contract testXChainHashAndSig {
    using ECDSA for bytes32;

    // sample messageHash
    // bytes32 messageHash = keccak256(abi.encodePacked("Hello, world!"));
    // bytes32 messageHash = "0xe61e57450178cf8fbc58a193220902a251e5e4f235749f69154f6ab3b57026f8";
    // bytes32 messageHashWPrefix = "0xf017d555ebb61a3e406d18dc960505a6bcddedb6771380c3d7b55f0894268903";
    // sample signature = 0x37ad61a91644b52b67fd0d3d1ffe5e08a23725bd1cd86a8fea5940fbcf058e2d4decae647500d9f38eb2bd97f32933f2943c5141c9f1a92c06f92eb10ca0ab611b

    function setUp() public view {
        console.log("Setting up test");
    }

    /**
     * @notice Gets the signer of a messageHash. Used for signature verification.
     * @dev Uses ECDSA.recover. On Frontend, use secp256k1 to sign the messageHash
     * @dev also remember to prepend the messageHash with "\x19Ethereum Signed Message:\n32"
     * @param messageHash bytes32 hash of the message
     * @param signature bytes signature of the message
     * @return address of the signer
     */
    function getSigner(bytes32 messageHash, bytes memory signature) public view returns (address) {
        address signer = ECDSA.recover(messageHash, signature);
        console.log("Signer: ", signer);
        return signer;
    }

    function hashSquidParams(address recipientAddress, address squidRouter, bytes memory squidData, uint256 squidValue)
        public
        pure
        returns (bytes32)
    {
        bytes32 hash = keccak256(
            // hash the parameters: dst chain recipient address, src chain squid Router address, squid call data, and squid eth value
            abi.encodePacked(recipientAddress, squidRouter, squidData, squidValue)
        );
        return hash;
    }

    function testHashAndSig() public view {
        // Sample data from the payload
        address recipientAddress = 0x6B3751c5b04Aa818EA90115AA06a4D9A36A16f02;
        address squidRouter = 0x481A2AAE41cd34832dDCF5A79404538bb2c02bC8;
        bytes memory squidData =
            hex""; // truncated for brevity
        uint256 squidValue = 1041052470763195;

        bytes32 providedHash = 0x2a51702b46ff556323ac4a9ac36adb1f5203299e38aa51b7d05011fcb3071401;
        bytes memory signature =
            hex"b0c9a066600f9de3a8b348c2e114b05e3c570664fa14435f0292cef24b5f090d264c6b0100d7063017040864d88b70f04274db04be6941a771c3e1c7da8944d51b";
        address depositSigner = 0x48E7E82F590192880D7D735faf73443c872cD5F0;

        // Generate the hash
        bytes32 hash = hashSquidParams(recipientAddress, squidRouter, squidData, squidValue);
        require(hash == providedHash, "Hashes do not match");
        console.log("Hashes match!");
        console.log("Expect: ", depositSigner);

        // Get the signer from the hash and signature
        address signer = getSigner(hash, signature);

        // Additional signatures for testing
        bytes memory signature2 =
            hex"3cf0ee6588f51692f397dbcad7f52311c51c300f834a7c61a3e8e87f9a7845ae4f8f38a38309eb863ccd58b7df0df5c48ef4dc947dab5db7449e049f4eddc5191b";
        bytes memory signature3 =
            hex"01d9c0fad16230133cd1b34bdb455857c52afcc1e618b3d90fe71546b1f2ade5647cb17fb1784e0fa40f73dac796a7451930ff3d54f7c0a2f61276f3cae815491b";
        bytes memory signature4 =
            hex"c95d2b618a7143aeda4d56ebb22d603953ca17a61aaace810880631108a62485172546cf1d6c10351a2514eba1f308bf3c222e90c60c1f14797c056ec9a6d52f1c";
        bytes memory signature5 =
            hex"eb089034c430fb3441c18c45a3754fa45fbfb48f2fbe683baa6ce66aca562f201fb703869a80257f6fc65ac46683ae4b1c7da5bce80d8b9c52e31195c7d36f031c";

        bytes memory signature6 =
            hex"3a5b096b306dde7668352e4c8804c301d5e2ad6c41e45b283d9886450bb8808f709075df9680527c8e5cf5ea5be6d8459f0ec422c994f0fbe989ba9862d149531c";

        getSigner(hash, signature2);
        getSigner(hash, signature3);
        getSigner(hash, signature4);
        getSigner(hash, signature5);
        getSigner(
            hash,
            hex"3a5b096b306dde7668352e4c8804c301d5e2ad6c41e45b283d9886450bb8808f709075df9680527c8e5cf5ea5be6d8459f0ec422c994f0fbe989ba9862d149531c"
        );

        require(signer == depositSigner, "Signer is not the expected address");
    }

    // Sample Payload:
    // const mockSquidRouteResponse = {
    // 			params: {
    // 				integratorId: 'peanut-api',
    // 				collectFees: { feeLocation: 'NONE' },
    // 				slippage: 10,
    // 				toAddress: '0x6B3751c5b04Aa818EA90115AA06a4D9A36A16f02',
    // 				fromAddress: '0x6B3751c5b04Aa818EA90115AA06a4D9A36A16f02',
    // 				fromAmount: '1000000000000000',
    // 				toToken: {
    // 					chainId: 59140,
    // 					address: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
    // 					name: 'ETH',
    // 					symbol: 'ETH',
    // 					decimals: 18,
    // 					logoURI: 'https://raw.githubusercontent.com/0xsquid/assets/main/images/tokens/eth.svg',
    // 					coingeckoId: 'ethereum',
    // 				},
    // 				fromToken: {
    // 					chainId: 5,
    // 					address: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
    // 					name: 'Ethereum',
    // 					symbol: 'ETH',
    // 					decimals: 18,
    // 					logoURI: 'https://raw.githubusercontent.com/0xsquid/assets/main/images/tokens/eth.svg',
    // 					coingeckoId: 'ethereum',
    // 					commonKey: 'eth-wei',
    // 				},
    // 				toChain: '59140',
    // 				fromChain: '5',
    // 				enableForecall: 'true',
    // 			},
    // 			transactionRequest: {
    // 				routeType: 'CALL_BRIDGE_CALL',
    // 				targetAddress: '0x481A2AAE41cd34832dDCF5A79404538bb2c02bC8',
    // 				data: '...',
    // 				value: '1041040028479509',
    // 				gasLimit: '373584',
    // 				gasPrice: '15',
    // 				maxFeePerGas: '1500000026',
    // 				maxPriorityFeePerGas: '1500000000',
    // 			},
    // 		}
}
